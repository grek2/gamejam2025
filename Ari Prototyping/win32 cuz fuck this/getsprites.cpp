#include <windows.h> 
#include <d2d1.h>
#include "mapfunctions.h"
#include <math.h>
// #include <stdio.h>
#pragma comment(lib, "d2d1.lib")
// int stonemap[] = {1,2,3,4,5,6,7,10,11,12,13,14,15,16,17,18,19,20,22,26,27,28,29,30,31,32,33,34,35,42,43,44,45,46,47,48,49,50,58,59,60,61,62,63,64,65,75,76,77,78,79,80,97,98,111,112,113,114,127,128,129,130,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176};
// int cavemap[] = {21};
int greensprite[16][16] = {
    {1,1,1,2,0,2,2,0,1,1,2,2,0,2,1,1},
    {1,1,1,1,2,2,0,1,1,1,1,1,2,2,2,0},
    {1,1,1,1,2,2,0,1,1,1,1,1,2,2,1,2},
    {0,1,1,1,2,2,0,1,1,1,1,1,1,2,1,2},
    {0,1,1,1,2,2,0,1,1,1,1,1,1,2,1,2},
    {1,1,1,1,2,0,1,1,1,1,1,1,1,1,1,2},
    {1,1,1,1,2,0,1,1,1,1,1,0,0,2,2,0},
    {1,1,1,1,2,0,1,1,1,1,0,1,1,1,2,0},
    {1,1,1,2,2,0,1,1,1,1,0,1,1,1,1,2},
    {1,1,1,2,2,0,1,1,1,1,0,1,1,1,1,2},
    {0,1,2,2,2,0,2,1,1,2,0,1,1,1,2,2},
    {0,1,2,0,0,0,2,2,1,2,0,1,1,1,2,0},
    {1,2,0,1,1,1,1,1,2,2,0,1,1,1,2,0},
    {1,2,0,1,1,1,1,2,2,2,0,1,1,1,2,0},
    {1,0,1,1,1,1,1,1,2,2,2,1,1,2,2,2},
    {2,0,1,0,1,1,0,2,0,2,2,0,0,2,2,0}
};
int cavesprite[16][16]={
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2} 
};
int bushsprite[16][16]={
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,1,0,1,2,2,2,0,0,0,0,0,0},
    {0,0,1,0,1,1,1,1,1,2,2,2,2,0,0,0},
    {0,0,1,1,2,1,1,1,1,1,2,2,1,2,0,0},
    {0,1,1,1,1,1,1,1,1,1,1,2,2,2,0,0},
    {0,1,1,1,1,1,2,1,1,1,2,1,2,2,2,0},
    {1,1,1,1,1,1,1,1,1,1,2,2,2,2,0,0},
    {1,1,2,1,1,1,1,1,1,1,1,2,2,2,2,0},
    {0,1,1,1,1,1,1,1,2,1,1,2,2,1,2,0},
    {1,1,1,1,2,1,1,1,1,1,1,2,2,2,2,0},
    {1,1,1,1,1,1,1,1,1,2,2,2,2,2,0,0},
    {1,1,2,1,1,1,1,1,1,1,2,1,2,2,0,0},
    {0,1,1,1,1,1,1,2,2,2,2,2,2,0,0,0},
    {0,0,0,1,1,3,1,3,2,2,1,0,0,0,0,0},
    {0,0,0,0,2,3,3,3,3,3,2,2,2,2,2,2},
    {0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0}
};
int watersprite[16][16]={
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
};
int uptree[16][16] = {
    {0,0,0,0,0,0,0,0,0,0,1,1,2,2,0,0},
    {0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,0},
    {0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,0},
    {0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2},
    {0,0,0,0,0,0,2,2,0,1,1,1,1,1,2,2},
    {0,0,0,0,0,0,1,2,0,1,1,1,1,2,2,2},
    {0,0,0,0,0,1,1,2,0,1,1,1,1,1,2,2},
    {0,0,0,0,0,1,1,2,2,1,1,1,1,1,2,0},
    {0,0,0,2,2,1,1,2,1,1,1,1,1,1,1,0},
    {0,0,1,1,2,1,1,2,1,1,1,1,1,1,1,0},
    {0,1,1,1,1,1,1,2,1,1,1,1,1,1,2,0},
    {0,1,1,1,1,1,1,2,0,1,1,1,1,1,2,2},
    {0,1,1,1,2,1,2,2,2,1,1,1,1,1,2,2},
    {0,1,1,1,2,1,2,2,1,1,1,1,1,1,2,2},
    {1,1,1,1,1,1,2,2,2,1,1,1,1,2,2,0},
    {1,1,1,1,1,1,2,2,2,1,2,2,1,1,2,0}
};
int flattree[16][16] = {
    {0,0,1,1,2,2,0,0,0,0,0,0,0,0,0,0},
    {0,1,1,1,1,2,2,0,0,0,0,1,2,0,0,0},
    {1,1,1,1,1,1,2,0,0,0,1,1,1,2,0,0},
    {0,1,1,1,1,1,2,2,0,1,1,1,1,1,2,0},
    {0,1,1,1,1,1,2,2,2,1,1,1,1,1,2,0},
    {0,1,1,1,1,2,2,2,0,1,1,1,1,1,1,2},
    {0,1,1,1,1,1,2,2,0,1,1,1,1,1,1,2},
    {2,1,1,1,1,1,2,0,0,1,1,1,1,1,2,2},
    {1,1,1,1,1,1,1,0,1,1,1,1,1,1,2,0},
    {1,1,1,1,1,1,1,0,1,1,1,1,1,2,2,0},
    {1,1,1,1,1,1,2,0,1,1,1,1,1,2,2,0},
    {0,1,1,1,1,1,2,2,0,1,1,1,1,1,2,2},
    {2,1,1,1,1,1,2,2,2,1,1,1,1,1,1,2},
    {1,1,1,1,1,1,2,2,0,0,2,2,1,1,1,2},
    {2,1,1,1,1,2,2,0,1,1,1,1,2,1,2,2},
    {2,1,2,2,1,1,2,0,1,1,1,2,2,1,1,2}
};
int downtree[16][16] = {
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,1,1,1,2,0,0,0,0,0,0,0,0,0,0},
    {0,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0},
    {2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0},
    {0,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0},
    {0,1,1,1,1,1,1,2,1,0,0,0,0,0,0,0},
    {0,1,1,1,1,1,2,2,1,1,2,2,2,0,0,0},
    {1,1,1,1,1,1,2,0,1,2,1,1,1,2,0,0},
    {1,1,1,1,1,2,2,0,1,1,1,1,1,2,0,0},
    {1,1,1,1,1,2,2,0,1,1,1,1,1,1,2,0},
    {0,1,1,1,1,1,2,2,0,1,1,1,1,1,2,0},
    {2,1,1,1,1,1,1,2,0,1,1,1,1,1,2,0},
    {0,0,2,2,1,1,1,2,0,1,1,1,1,2,2,0},
    {1,1,1,1,2,1,2,2,0,2,2,1,1,2,2,0},
    {1,1,1,2,2,1,1,2,0,2,2,2,1,2,0,0}
};
int stonedown[16][16] = {
    {1,1,1,1,0,1,1,1,2,2,2,0,1,1,2,2},
    {1,1,1,1,1,1,1,1,1,1,2,0,1,1,1,2},
    {1,1,1,2,1,1,1,1,1,1,2,0,1,1,1,2},
    {1,1,1,2,1,1,1,1,1,1,2,0,1,1,1,1},
    {1,1,1,2,1,1,1,1,1,1,2,0,1,1,1,1},
    {1,1,1,2,1,1,1,1,1,1,2,0,1,1,1,1},
    {2,1,2,2,1,1,1,1,1,1,2,2,0,1,1,1},
    {0,2,2,2,0,1,1,1,1,1,2,2,2,0,1,1},
    {0,0,0,2,2,1,1,1,1,1,2,2,2,0,1,1},
    {0,0,0,0,2,1,2,1,1,2,2,2,2,0,1,1},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,0,1,1},
    {0,0,0,0,0,0,0,0,2,2,2,2,2,0,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2}
};
int stoneup[16][16] = {
    {0,1,1,1,1,1,1,2,2,2,0,1,1,2,2,2},
    {0,1,1,1,1,1,1,1,2,2,0,1,1,1,2,2},
    {0,1,2,2,1,1,1,1,2,2,0,1,1,1,2,2},
    {0,0,1,1,2,1,1,1,2,2,0,1,1,1,2,0},
    {0,1,1,1,2,1,1,1,2,2,0,1,1,1,2,0},
    {0,1,1,1,2,1,1,1,2,2,0,1,2,2,0,0},
    {0,1,1,1,2,1,1,1,2,2,2,2,0,0,0,0},
    {0,1,1,1,2,1,1,1,2,2,0,0,0,0,0,0},
    {0,1,1,1,2,1,1,2,2,0,0,0,0,0,0,0},
    {0,1,1,1,2,1,1,2,2,0,0,0,0,0,0,0},
    {2,0,1,1,2,1,1,2,2,0,0,0,0,0,0,0},
    {2,0,1,1,2,1,1,2,2,0,0,0,0,0,0,0},
    {2,0,1,1,2,1,2,2,0,0,0,0,0,0,0,0},
    {2,0,1,2,2,2,2,0,0,0,0,0,0,0,0,0},
    {2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};
int subSpriteup[16][16] = {
    {0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0},
    {0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0},
    {0,0,2,0,1,1,1,1,1,1,1,1,0,2,0,0},
    {0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0},
    {0,0,2,3,1,1,1,1,1,1,1,1,3,2,0,0},
    {0,0,2,2,3,3,1,1,1,1,3,3,2,2,0,0},
    {0,0,0,2,3,3,3,1,1,3,3,3,2,0,0,0},
    {0,0,0,3,1,3,3,3,3,3,3,1,3,0,0,0},
    {0,0,0,3,3,1,1,1,1,1,1,1,3,3,0,0},
    {0,0,2,3,3,1,1,1,1,1,1,1,3,3,0,0},
    {0,0,2,3,3,1,1,1,1,1,1,3,3,0,0,0},
    {0,0,2,2,1,3,3,3,3,3,3,1,1,0,0,0},
    {0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0},
    {0,0,0,0,3,1,1,1,1,1,3,3,3,0,0,0},
    {0,0,0,0,0,3,3,0,0,3,3,3,3,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0}
};
int subSpriteupmoving[16][16] = {
    {0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0},
    {0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0},
    {0,0,2,0,1,1,1,1,1,1,1,1,0,2,0,0},
    {0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0},
    {0,0,2,3,1,1,1,1,1,1,1,1,3,2,0,0},
    {0,0,2,2,3,3,1,1,1,1,3,3,2,2,0,0},
    {0,0,0,2,3,3,3,1,1,3,3,3,2,0,0,0},
    {0,0,0,3,1,3,3,3,3,3,3,1,3,0,0,0},
    {0,0,3,3,1,1,1,1,1,1,1,3,3,0,0,0},
    {0,0,3,3,1,1,1,1,1,1,1,3,3,2,0,0},
    {0,0,0,3,3,1,1,1,1,1,1,3,3,2,0,0},
    {0,0,0,1,1,3,3,3,3,3,3,1,2,2,0,0},
    {0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0},
    {0,0,0,3,3,3,1,1,1,1,1,3,0,0,0,0},
    {0,0,0,3,3,3,3,0,0,3,3,0,0,0,0,0},
    {0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0}
};

int subSpritedown[16][16] = {
    {0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0},
    {0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0},
    {0,0,2,0,1,3,3,3,3,3,3,1,0,2,0,0},
    {0,0,2,0,3,3,3,3,3,3,3,3,0,2,0,0},
    {0,0,2,2,3,2,1,2,2,1,2,3,2,2,0,0},
    {0,0,2,2,3,2,3,2,2,3,2,3,2,2,0,0},
    {0,0,0,2,2,2,2,2,2,2,2,2,2,3,0,0},
    {0,0,0,1,1,2,2,3,3,2,2,1,1,3,0,0},
    {0,3,3,3,3,3,2,2,2,2,1,1,3,3,3,0},
    {3,3,2,3,3,3,3,1,1,1,1,1,2,3,3,0},
    {3,2,2,2,3,3,2,3,3,1,1,2,2,2,3,0},
    {3,3,2,3,3,3,2,1,3,3,3,3,2,2,2,0},
    {3,3,2,3,3,3,2,3,3,1,1,1,1,2,0,0},
    {3,3,3,3,3,3,2,1,1,1,1,1,0,0,0,0},
    {0,2,2,2,2,2,3,0,0,3,3,3,0,0,0,0},
    {0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0}
};
int subSpritedownmoving[16][16] = {
    {0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0},
    {0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0},
    {0,0,2,0,1,3,3,3,3,3,3,1,0,2,0,0},
    {0,0,2,0,3,3,3,3,3,3,3,3,0,2,0,0},
    {0,0,2,2,3,2,1,2,2,1,2,3,2,2,0,0},
    {0,0,2,2,3,2,3,2,2,3,2,3,2,2,0,0},
    {0,0,0,2,2,2,2,2,2,2,2,2,2,3,0,0},
    {0,0,0,0,1,2,2,3,3,2,2,1,3,3,0,0},
    {0,0,3,3,3,3,3,2,2,2,1,1,1,2,0,0},
    {0,3,3,2,3,3,3,3,1,1,1,1,1,2,0,0},
    {0,3,2,2,2,3,3,2,3,3,1,1,3,0,0,0},
    {0,3,3,2,3,3,3,2,1,3,3,3,1,2,2,0},
    {0,3,3,2,3,3,3,2,3,3,1,1,1,0,0,0},
    {0,3,3,3,3,3,3,2,1,1,1,3,0,0,0,0},
    {0,0,2,2,2,2,2,0,0,3,3,3,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0}
};

int subSpriteleft[16][16] = {
    {0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0},
    {0,0,0,3,3,3,3,1,1,1,1,1,0,0,0,0},
    {0,0,3,3,3,3,3,3,1,1,2,1,1,1,0,0},
    {0,0,0,3,3,3,3,3,3,2,2,1,1,1,1,0},
    {3,0,0,2,1,2,2,3,2,2,2,1,1,0,1,0},
    {3,2,2,2,3,2,2,3,2,2,3,3,1,0,0,0},
    {3,0,0,2,2,2,2,2,2,3,3,3,0,0,0,0},
    {3,0,0,2,2,2,2,1,1,1,1,0,0,0,0,0},
    {3,0,3,3,3,1,1,1,1,1,1,1,3,0,0,0},
    {3,2,3,3,1,1,1,2,2,2,1,3,3,3,0,0},
    {3,0,3,3,1,1,1,2,2,2,3,3,3,3,0,0},
    {3,0,0,0,3,1,1,1,2,2,3,3,3,3,0,0},
    {3,0,0,0,3,3,3,3,1,1,3,3,1,0,0,0},
    {0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0},
    {0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0},
    {0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0}
};
int subSpriteleftmoving[16][16] = {
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0},
    {0,0,0,3,3,3,3,1,1,1,1,1,0,0,0,0},
    {0,0,3,3,3,3,3,3,1,1,2,1,1,1,0,0},
    {0,0,0,3,3,3,3,3,3,2,2,1,1,1,1,0},
    {0,0,0,2,1,2,2,3,2,2,2,1,1,0,1,0},
    {0,2,2,2,3,2,2,3,2,2,3,3,1,0,0,0},
    {0,3,0,2,2,2,2,2,2,3,3,3,0,0,0,0},
    {0,3,0,2,2,2,2,1,1,1,1,0,0,0,0,0},
    {0,3,0,3,3,2,2,2,1,1,3,3,1,0,0,0},
    {0,3,2,3,1,2,2,2,3,3,3,3,3,0,0,0},
    {0,3,0,3,1,1,2,2,3,3,3,3,3,1,0,0},
    {0,3,0,0,3,1,1,1,3,3,3,3,1,1,0,0},
    {0,3,0,1,3,3,3,3,1,1,3,3,1,3,3,0},
    {0,0,3,3,1,1,1,1,1,1,1,1,3,3,3,0},
    {0,0,0,3,3,3,0,0,0,0,0,0,3,3,3,0}
};
int subSpriteright[16][16] = {
    {0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0},
    {0,0,0,0,1,1,1,1,1,3,3,3,3,0,0,0},
    {0,0,1,1,1,2,1,1,3,3,3,3,3,3,0,0},
    {0,1,1,1,1,2,2,3,3,3,3,3,3,0,0,0},
    {0,1,0,1,1,2,2,2,3,2,2,1,2,0,0,3},
    {0,0,0,1,3,3,2,2,3,2,2,3,2,2,2,3},
    {0,0,0,0,3,3,3,2,2,2,2,2,2,0,0,3},
    {0,0,0,0,0,1,1,1,1,2,2,2,2,0,0,3},
    {0,0,0,3,1,1,1,1,1,1,1,3,3,3,0,3},
    {0,0,3,3,3,1,2,2,2,1,1,1,3,3,2,3},
    {0,0,3,3,3,3,2,2,2,1,1,1,3,3,0,3},
    {0,0,3,3,3,3,2,2,1,1,1,3,0,0,0,3},
    {0,0,0,1,3,3,1,1,3,3,3,3,0,0,0,3},
    {0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
    {0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0},
    {0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,0}
};
int subSpriterightmoving[16][16] = {
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0},
    {0,0,0,0,1,1,1,1,1,3,3,3,3,0,0,0},
    {0,0,1,1,1,2,1,1,3,3,3,3,3,3,0,0},
    {0,1,1,1,1,2,2,3,3,3,3,3,3,0,0,0},
    {0,1,0,1,1,2,2,2,3,2,2,1,2,0,0,0},
    {0,0,0,1,3,3,2,2,3,2,2,3,2,2,2,0},
    {0,0,0,0,3,3,3,2,2,2,2,2,2,0,3,0},
    {0,0,0,0,0,1,1,1,1,2,2,2,2,0,3,0},
    {0,0,0,1,3,3,1,1,2,2,2,3,3,0,3,0},
    {0,0,0,3,3,3,3,3,2,2,2,1,3,2,3,0},
    {0,0,1,3,3,3,3,3,2,2,1,1,3,0,3,0},
    {0,0,1,1,3,3,3,3,1,1,1,3,0,0,3,0},
    {0,3,3,1,3,3,1,1,3,3,3,3,0,0,3,0},
    {0,3,3,3,1,1,1,1,1,1,1,1,3,3,0,0},
    {0,0,3,3,3,0,0,0,0,0,3,3,3,0,0,0}
};
D2D1_RECT_F greenrectangle;
D2D1_RECT_F blackrectangle;

inline void drawsquare(ID2D1HwndRenderTarget *pRenderTarget,ID2D1SolidColorBrush *pBrush, int x, int y,int sizey = 3,int sizex=3){
    // printf("t");
    if(pBrush != NULL){
        pRenderTarget->FillRectangle(D2D1::RectF(x,y,x+sizex,y+sizey), pBrush);
    }
}

void drawamap(std::vector<std::vector<int>> map,int type, double offsetx,double offsety,double subx, double suby,ID2D1HwndRenderTarget   *pRenderTarget, ID2D1SolidColorBrush *pBrush1,ID2D1SolidColorBrush *pBrush2,ID2D1SolidColorBrush *pBrush3=NULL){
    int (*Sprite)[16];
    switch(type){
        case(0):
            return;
        case(1):
            Sprite = greensprite;
            break;
        case(2):
            Sprite = stonedown;
            break;
        case(3):
            Sprite = stoneup;
            break;
        case(4):
            Sprite = flattree;
            break;
        case(5):
            Sprite = uptree;
            break;
        case(6):
            Sprite = downtree;
            break;
        case(7):
            Sprite = bushsprite;
            break;
        case(8):
            // Sprite = rock;
            break;
        case(9):
            // Sprite = darknut;
            break;
        case(10):
            // Sprite = tree1;
            break;
        case(11):
            // Sprite = tree2;
            break;
        case(12):
            // Sprite = tree3;
            break;
        case(13):
            // Sprite = tree4;
            break;
        case(14):
            Sprite = greensprite;
            break;
        case(15):
            Sprite = stonedown;
            break;
        case(16):
            Sprite = stoneup;
            break;
        case(17):
            Sprite = flattree;
            break;
        case(18):
            Sprite = uptree;
            break;
        case(19):
            Sprite = downtree;
            break;
        case(20):
            Sprite = bushsprite;
            break;
        case(21):
            // Sprite = rock;
            break;
        case(22):
            // Sprite = darknut;
            break;
        case(23):
            // Sprite = tree1;
            break;
        case(24):
            // Sprite = tree2;
            break;
        case(25):
            // Sprite = tree3;
            break;
        case(26):
            // Sprite = tree4;
            break;
        case(27):
            Sprite = greensprite;
            break;
        case(28):
            Sprite = stonedown;
            break;
        case(29):
            Sprite = stoneup;
            break;
        case(30):
            Sprite = flattree;
            break;
        case(31):
            Sprite = uptree;
            break;
        case(32):
            Sprite = downtree;
            break;
        case(33):
            Sprite = bushsprite;
            break;
        case(34):
            // Sprite = rock;
            break;
        case(35):
            // Sprite = darknut;
            break;
        case(36):
            // Sprite = tree1;
            break;
        case(37):
            // Sprite = tree2;
            break;
        case(38):
            // Sprite = tree3;
            break;
        case(39):
            // Sprite = tree4;
            break;
        case(40):
            Sprite = watersprite;
            break;
        case(41):
            Sprite = cavesprite;
            break;
    }
    for(int squarey =0;squarey<map.size();squarey++){
        int y = 48*(squarey+offsety);
        if (y<-48||y>48*8) continue;
        for(int squarex=0; squarex<map[squarey].size();squarex++){
            int x= 48*(squarex+offsetx);
            if (x<-48||x>48*8||map[squarey][squarex]!=type) continue;
            for(int i1 = 0;i1<16;i1++){
                for(int j = 0;j<16;j++){
                    
                    int size = 1;
                    for(int test = j+1;test<16;test++){
                        if (Sprite[i1][test]==Sprite[i1][j]){
                            size++;
                        }else{
                            break;
                        }
                    }
                    double distance = (squarex+j/16-subx/16)*(squarex+j/16-subx/16)+(squarey+i1/16-suby/16)*(squarey+i1/16-suby/16);
                    double light = (3-sqrt(distance))/2;
                    light = light>0 ? light :0;
                    const D2D1_COLOR_F green = D2D1::ColorF(13.0*light/256,146.0*light/256,99.0*light/256);
                    
                    pRenderTarget->CreateSolidColorBrush(green, &pBrush1);
                    switch(Sprite[i1][j]){
                        case(1):
                            
                            drawsquare(pRenderTarget,pBrush1,3*j+x,3*i1+y,3,3*size);
                            break;
                        case(2):
                            drawsquare(pRenderTarget,pBrush2,3*j+x,3*i1+y,3,3*size);
                            break;
                        case(3):
                            drawsquare(pRenderTarget,pBrush3,3*j+x,3*i1+y,3,3*size);
                    }
                    j+=size-1;
                    }
                }
        }
    }

        
}

HRESULT drawsub(HWND hwnd, ID2D1HwndRenderTarget *pRenderTarget,int x, int y,int direction,int movesprite){
    const D2D1_COLOR_F green = D2D1::ColorF(182.0/256,248.0/256,31.0/256);
    const D2D1_COLOR_F lbrown = D2D1::ColorF(254.0/256,161.0/256,71.0/256);
    const D2D1_COLOR_F dbrown = D2D1::ColorF(225.0/256,91.0/256,25.0/256);
    ID2D1SolidColorBrush *pBrush1;
    ID2D1SolidColorBrush *pBrush2;
    ID2D1SolidColorBrush *pBrush3;
    HRESULT hr1 = pRenderTarget->CreateSolidColorBrush(green, &pBrush1);
    HRESULT hr2 = pRenderTarget->CreateSolidColorBrush(lbrown, &pBrush2);
    HRESULT hr3 = pRenderTarget->CreateSolidColorBrush(dbrown, &pBrush3);
    if (SUCCEEDED(hr1)&&SUCCEEDED(hr2)&&SUCCEEDED(hr3))
    {
        int (*Sprite)[16]=subSpriteleft;
        for(int i = 0;i<16;i++){
            for(int j = 0;j<16;j++){
                int size = 0;
                for(int test = j;test<16;test++){
                    if (Sprite[i][test]==Sprite[i][j]){
                        size++;
                    }else{
                        break;
                    }
                }
                switch(Sprite[i][j]){
                    case(1):
                        drawsquare(pRenderTarget,pBrush1,3*j+x,3*i+y,3,3*size);
                        break;
                    case(2):
                        drawsquare(pRenderTarget,pBrush2,3*j+x,3*i+y,3,3*size);
                        break;
                    case(3):
                        drawsquare(pRenderTarget,pBrush3,3*j+x,3*i+y,3,3*size);
                        break;
                }
                j+=size-1;
            }
        }
    }
    return hr1&&hr2&&hr3;   
}